devtools::document()
devtools::create("FARMselect")
devtools::document()
devtools::document()
packageVersion("sgd")
packageVersion("gtools")
devtools::document()
library(FARMregress)
devtools::document()
library(FARMregress)
devtools::document()
library(FARMregress)
source('~/Projects/FARMregress/R/farmRegress.R')
x <- fread("data/x.csv")
library(data.table)
x <- fread("data/x.csv")
y <- fread("data/y.csv")
length(y)
y
y <- fread("data/y.csv")[,y]
y
farmRegress(x,y,type="classification")
library(sgd)
farmRegress(x,y,type="classification")
library(gtools)
farmRegress(x,y,type="classification")
dim(f.hat)
dim(x.res)
dim(x)
source('~/Projects/FARMregress/R/farmRegress.R')
farmRegress(x,y,type="classification")
dim(f.hat)
dim(x.res)
cbind(f.hat,x.res)
cv.model <- cv.glmnet(cbind(f.hat,x.res), y.res, family=family, ...)
library(glmnet)
cv.model <- cv.glmnet(cbind(f.hat,x.res), y.res, family=family, ...)
names(cv.model)
coef(cv.model,s="lambda.min")
dim(f.hat)
ncol(f.hat)
coef <-  coef(cv.model,s = "lambda.min")
coef
coef <-  coef(cv.model,s = "lambda.min")[-c(2:NCOL(f.hat))]
coef
class(coef(cv.model,s = "lambda.min"))
coef(cv.model,s = "lambda.min")
names(coef(cv.model,s = "lambda.min"))
rownames(coef(cv.model,s = "lambda.min"))
coef <-  coef(cv.model,s = "lambda.min")
coef
as.matrix(coef())
rownames(coef())
rownames(coef
)
coef.tmp <-  coef(cv.model,s = "lambda.min")
coef.tmp
as.vector(coef.tmp)
library(data.table)
x <- fread("data/x.csv")
y <- as.vector(fread("data/y.csv"))
library(FARMregress)
farmRegress(x,y,type="classification")
rm(list=ls())
devtools::document()
library(FARMregress)
usethis::use_testthat()
x <- fread("../data/x.csv")
getwd()
x <- fread("data/x.csv")
y <- as.vector(fread("data/y.csv"))
out <- farmRegress(x,y,type="classification")
source('~/Projects/FARMregress/R/farmRegress.R')
out <- farmRegress(x,y,type="classification")
library(sgd)
out <- farmRegress(x,y,type="classification")
library(gtools)
out <- farmRegress(x,y,type="classification")
class(y)
as.factor(y)
y
x <- fread("data/x.csv")
y <- fread("data/y.csv")[y]
y <- fread("data/y.csv")[,y]
out <- farmRegress(x,y,type="classification")
y
as.factor(y)
y.res <- as.factor(y)
cv.model <- cv.glmnet(cbind(f.hat,x.res), y.res, family=family, ...)
library(glmnet)
cv.model <- cv.glmnet(cbind(f.hat,x.res), y.res, family=family, ...)
names(cv.model)
coef(cv.model,s="lambda.min")
F.factor <- NCOL(f.hat)
1:F.factor
1:F.factor+1
coef.tmp <-  coef(cv.model,s = "lambda.min")
betas <- rownames(coef.tmp)[-c(1:F.factor+1)]
coef <- coef.tmp[-c(1:F.factor+1)]
coef
fitted.value <- predict(cv.model,cbind(f.hat,x),s="lambda.min", type="response")
fitted.value
prob <- predict(cv.model,cbind(f.hat,x),s="lambda.min", type="response")
fitted.value <- ifelse(prob > 0.5,1,0)
ic <- cor(y.res,fitted.value,use="pairwise")
ic <- cor(y,fitted.value,use="pairwise")
ic
resid(cv.model$glmnet.fit)
resid(cv.model)
names(cv.model$glmnet.fit)
cv.model$glmnet.fit$dev.ratio
residual <- mean(y==fitted.value)
residual
cv.model
coef(cv.model,s="lambda.min")
predict.cv.glmnet
source('~/Projects/FARMregress/R/farmRegress.R')
out <- farmRegress(x,y,type="classification")
source('~/Projects/FARMregress/R/farmRegress.R')
source('~/Projects/FARMregress/R/farmRegress.R')
out <- farmRegress(x,y,type="classification")
eigen.value
k.factors
dim(x %*% lambda.hat)
dim(lambda.hat)
k.factors <- NCOL(lambda.hat)
F.hat <- x %*% lambda.hat %*% diag(1/eigen.value[1:k.factors])
dim(F.hat)
F.hat[1:10,]
source('~/Projects/FARMregress/R/farmRegress.R')
out <- farmRegress(x,y,type="classification")
out <- farmRegress(x,y,type="regression")
names(out)
out$coefficients
out$betas
dim(x)
out <- farmRegress(x,y,type="classification")
source('~/Projects/FARMregress/R/farmRegress.R')
out <- farmRegress(x,y,type="classification")
cv.model
coef(cv.model,s="lambda.min")
dim(f.hat)
matrix(0,dim(f.hat))
dim(matrix(0,dim(f.hat)))
dim(array(0,dim=dim(f.hat)))
f.zero <- array(0,dim=dim(f.hat))
prob <- predict(cv.model, cbind(f.zero,x), s="lambda.min", type="response")
fitted.value <- ifelse(prob > 0.5,1,0)
residual <- mean(y==fitted.value)
residual
devtools::document()
rm(list=ls())
devtools::document()
library(FARMregress)
x <- fread("data/x.csv")
y <- fread("data/y.csv")[,y]
out <- farmRegress(x,y,type="classification")
